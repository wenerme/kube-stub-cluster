apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-agent-conf
  labels:
    app: vector-agent
data:
  agent.yaml: |
    data_dir: /vector-data-dir
    api:
      enabled: true
      address: 127.0.0.1:8686
      #address: 0.0.0.0:8686
      playground: false
    sources:
      kubernetes_logs_raw:
        type: kubernetes_logs
      host_metrics:
        filesystem:
          devices:
            excludes: [ binfmt_misc ]
          filesystems:
            excludes: [ binfmt_misc ]
          mountPoints:
            excludes: [ "*/proc/sys/fs/binfmt_misc" ]
        type: host_metrics
      host_log_raw:
        type: file
        include:
        - /var/log/messages
        - /var/log/kern.log
        - /var/log/tinc.*.log
        - /var/log/docker.log
        - /var/log/k3s.log
        #- /var/log/*
        #- /var/log/**/*
        exclude:
        - /var/log/pods/**/*
        - /var/log/containers/**/*
        - "**/*.gz"
        - "**/*.tmp"
        fingerprint:
          # device_and_inode
          strategy: checksum
          ignored_header_bytes: 64
          lines: 2
      internal_metrics:
        type: internal_metrics
    transforms:
      kubernetes_logs_processed:
        type: remap
        inputs:
        - kubernetes_logs_raw
        source: |-
          # exact time the event was processed by Kubernetes.
          ._timestamp = .timestamp
      # join line
      kubernetes_logs:
        type: reduce
        inputs:
        - kubernetes_logs_processed
        group_by:
        - kubernetes_container_id
        merge_strategies:
          message: concat_newline
        starts_when: match(string!(.message), r'^[^\s]')
      host_log_processed:
        type: remap
        inputs:
        - host_log_raw
        source: |-
          .host = get_env_var("VECTOR_SELF_NODE_NAME") ?? null
          ._file = .file

          # parsing
          msg = string!(.message)
          if starts_with(msg,"{") && ends_with(msg,"}") {
            del(.message)
            . |= object(parse_json(msg) ?? {}) ?? {}
          } else if starts_with(msg,"time=") {
            del(.message)
            . |= parse_key_value(msg) ?? {}
            if .timestamp == null && .time != null {.timestamp = .time}
          } else if match(msg,r'^[IWEF]\d{4}'){
            # will override .file
            . |= parse_klog(msg) ?? {}
          } else {
            r = parse_syslog(.message) ?? {}
            if r.appname != null { . |= r }
          }

          if .message == null {
            if .msg != null {
              .message = .msg
              del(.msg)
            }else {
              .message = ""
            }
          }

          # time for collector
          if ._timestamp == null && .timestamp != null {._timestamp = .timestamp}

      host_log:
        type: route
        inputs:
        - host_log_processed
        route:
          k3s: ._file == "/var/log/k3s.log"
          docker: ._file == "/var/log/docker.log"
          syslog: '._file == "/var/log/messages" || ._file == "/var/log/kern.log"'

    sinks:
      prom_exporter:
        type: prometheus_exporter
        inputs: [ host_metrics, internal_metrics ]
        address: 0.0.0.0:9090
      # OO Metrics is not ready - use 1000 more space
      #openobserve_metrics:
      #  type: prometheus_remote_write
      #  inputs: [ host_metrics, internal_metrics ]
      #  endpoint: "${ZO_URL}/prometheus/api/v1/write"
      #  auth:
      #    strategy: basic
      #    user: "${ZO_USER}"
      #    password: "${ZO_PASSWORD}"
      #  healthcheck:
      #    enabled: false
      openobserve_kube_log:
        type: http
        inputs: [ kubernetes_logs ]
        uri: "${ZO_URL}/kube-log/_json"
        method: post
        compression: gzip
        auth:
          strategy: basic
          user: "${ZO_USER}"
          password: "${ZO_PASSWORD}"
        encoding:
          codec: json
          timestamp_format: rfc3339
        healthcheck:
          enabled: false
      openobserve_host_log:
        type: http
        inputs: [ host_log._unmatched ]
        uri: "${ZO_URL}/host-log/_json"
        method: post
        compression: gzip
        auth:
          strategy: basic
          user: "${ZO_USER}"
          password: "${ZO_PASSWORD}"
        encoding:
          codec: json
          timestamp_format: rfc3339
        healthcheck:
          enabled: false
      openobserve_k3s_log:
        type: http
        inputs: [ host_log.k3s ]
        uri: "${ZO_URL}/k3s-log/_json"
        method: post
        compression: gzip
        auth:
          strategy: basic
          user: "${ZO_USER}"
          password: "${ZO_PASSWORD}"
        encoding:
          codec: json
          timestamp_format: rfc3339
        healthcheck:
          enabled: false
      openobserve_host_docker_log:
        type: http
        inputs: [ host_log.docker ]
        uri: "${ZO_URL}/host-docker-log/_json"
        method: post
        compression: gzip
        auth:
          strategy: basic
          user: "${ZO_USER}"
          password: "${ZO_PASSWORD}"
        encoding:
          codec: json
          timestamp_format: rfc3339
        healthcheck:
          enabled: false
      openobserve_syslog:
        type: http
        inputs: [ host_log.syslog ]
        uri: "${ZO_URL}/host-syslog/_json"
        method: post
        compression: gzip
        auth:
          strategy: basic
          user: "${ZO_USER}"
          password: "${ZO_PASSWORD}"
        encoding:
          codec: json
          timestamp_format: rfc3339
        healthcheck:
          enabled: false
